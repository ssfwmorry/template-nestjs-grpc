// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.27.3
// source: services/account.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Account } from "../models/account";

export const protobufPackage = "api";

export interface ListAccountsRequest {
}

export interface ListAccountsResponse {
  accounts: Account[];
  totalCount: number;
}

export const API_PACKAGE_NAME = "api";

export interface AccountServiceClient {
  listAccounts(request: ListAccountsRequest, metadata?: Metadata): Observable<ListAccountsResponse>;
}

export interface AccountServiceController {
  listAccounts(
    request: ListAccountsRequest,
    metadata?: Metadata,
  ): Promise<ListAccountsResponse> | Observable<ListAccountsResponse> | ListAccountsResponse;
}

export function AccountServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["listAccounts"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AccountService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AccountService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ACCOUNT_SERVICE_NAME = "AccountService";
